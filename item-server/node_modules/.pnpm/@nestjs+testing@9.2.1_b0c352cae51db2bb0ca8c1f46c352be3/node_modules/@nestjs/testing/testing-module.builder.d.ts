import { LoggerService } from '@nestjs/common';
import { ModuleMetadata } from '@nestjs/common/interfaces';
import { MetadataScanner } from '@nestjs/core/metadata-scanner';
import { MockFactory, OverrideBy } from '.pnpm/@nestjs+testing@9.2.1_b0c352cae51db2bb0ca8c1f46c352be3/node_modules/@nestjs/testing/interfaces';
import { TestingModule } from '.pnpm/@nestjs+testing@9.2.1_b0c352cae51db2bb0ca8c1f46c352be3/node_modules/@nestjs/testing/testing-module';
export declare class TestingModuleBuilder {
    private readonly applicationConfig;
    private readonly container;
    private readonly overloadsMap;
    private readonly scanner;
    private readonly instanceLoader;
    private readonly module;
    private testingLogger;
    private mocker?;
    constructor(metadataScanner: MetadataScanner, metadata: ModuleMetadata);
    setLogger(testingLogger: LoggerService): this;
    overridePipe<T = any>(typeOrToken: T): OverrideBy;
    useMocker(mocker: MockFactory): TestingModuleBuilder;
    overrideFilter<T = any>(typeOrToken: T): OverrideBy;
    overrideGuard<T = any>(typeOrToken: T): OverrideBy;
    overrideInterceptor<T = any>(typeOrToken: T): OverrideBy;
    overrideProvider<T = any>(typeOrToken: T): OverrideBy;
    compile(): Promise<TestingModule>;
    private override;
    private createOverrideByBuilder;
    private applyOverloadsMap;
    private getRootModule;
    private createModule;
    private applyLogger;
}
