import { Type } from '.pnpm/@nestjs+common@9.2.1_6363e4e8645f76ca34905e3a7e635f02/node_modules/@nestjs/common/interfaces/type.interface';
import { RouteInfo } from '.pnpm/@nestjs+common@9.2.1_6363e4e8645f76ca34905e3a7e635f02/node_modules/@nestjs/common/interfaces/middleware/middleware-configuration.interface';
import { MiddlewareConsumer } from '.pnpm/@nestjs+common@9.2.1_6363e4e8645f76ca34905e3a7e635f02/node_modules/@nestjs/common/interfaces/middleware/middleware-consumer.interface';
export interface MiddlewareConfigProxy {
    /**
     * Excludes routes from the currently processed middleware.
     *
     * @param {(string | RouteInfo)[]} routes
     * @returns {MiddlewareConfigProxy}
     */
    exclude(...routes: (string | RouteInfo)[]): MiddlewareConfigProxy;
    /**
     * Attaches passed either routes or controllers to the currently configured middleware.
     * If you pass a class, Nest would attach middleware to every path defined within this controller.
     *
     * @param {(string | Type | RouteInfo)[]} routes
     * @returns {MiddlewareConsumer}
     */
    forRoutes(...routes: (string | Type<any> | RouteInfo)[]): MiddlewareConsumer;
}
